https://visualgo.net/en/sorting

Insertion Sort: Only few items and mostly sorted Data.
Loops through values and push to left if lower

Bubble Sort: Not efficient so very few use in real life. Educational purpose.
Compare 1 by 1 based on index and swap.

Selection Sort: Not efficient so very few use in real life. Educational purpose.
Choose lowest then swap.

Merge Sort: Really good. Divide and Conquer. Fast. Always O(n log(n)). But expensive Space complexity
Divide and Conquer. Split into 2 arrays and compare then re-arrange then merge.

Quick sort: Relatively better than Merge sort due to less space complexity. But worst is still O(n^2) without good pivot.
Heap sort: On average, slower than Quick sort in most cases

COMPARISION SORTS: Bubble, Insertion, Selection, Merge, Quick sort.
NON-COMPARISION SORTS: Counting and Radix Sort. Can beat O(n log n).

//#1 - Sort 10 schools around your house by distance:
insertion sort

//#2 - eBay sorts listings by the current Bid amount:
radix or counting sort

//#3 - Sort scores on ESPN
Quick sort

//#4 - Massive database (can't fit all into memory) needs to sort through past year's user data
Merge Sort

//#5 - Almost sorted Udemy review data needs to update and add 2 new reviews
Insertion Sort

//#6 - Temperature Records for the past 50 years in Canada
radix or counting Sort
Quick sort if decimal places

//#7 - Large user name database needs to be sorted. Data is very random.
Quick sort

//#8 - You want to teach sorting
Bubble sort